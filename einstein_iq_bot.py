import db
import config
import random
import aiofiles
import docx
import os
from aiogram import Bot
from aiogram import Dispatcher
from aiogram import executor
from aiogram.types import InlineKeyboardButton
from aiogram.types import InlineKeyboardMarkup
from aiogram.types import CallbackQuery
from aiogram.types import Message
from json import dumps
from json import loads
from aiogram import Bot, Dispatcher
from aiogram.utils import executor


def reset(uid: int):
    db.set_in_process(uid, False)
    db.set_selected_ticket(uid, 0)
    db.change_questions_passed(uid, 0)
    db.change_questions_message(uid, 0)
    db.change_current_question(uid, 0)


bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot=bot)


@dp.message_handler(commands=["play"])
async def go_handler(message: Message):
    if not db.is_exists(message.from_user.id):
        db.add(message.from_user.id)
    if db.is_in_process(message.from_user.id):
        await bot.send_message(
            message.from_user.id,
            "üö´*–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Ç–µ—Å—Ç, –ø–æ—Ç–æ–º—É —á—Ç–æ –≤—ã –µ–≥–æ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ*\\.",
            parse_mode="MarkdownV2"
        )
        return


    document = docx.Document()


    ticket_id = db.get_selected_ticket(message.from_user.id)
    if ticket_id:
        selected_data = f"ticket/bilet{ticket_id}.json"
    else:
        ticket_id = random.randint(1, 5)
        selected_data = f"ticket/bilet{ticket_id}.json"
        db.set_selected_ticket(message.from_user.id, ticket_id)
    async with aiofiles.open(selected_data, "r", encoding="utf-8") as file:
        questions = await file.read()
        questions = loads(questions)


    def compose_markup(question: int):
        km = InlineKeyboardMarkup(row_width=3)
        for i in range(len(questions[question]["variants"])):
            cd = {"question": question, "answer": i}
            km.insert(
                InlineKeyboardButton(
                    questions[question]["variants"][i],
                    callback_data=dumps(cd)
                )
            )
        return km


    @dp.callback_query_handler(lambda c: True)
    async def answer_handler(callback: CallbackQuery):
        ticket_id = db.get_selected_ticket(message.from_user.id)
        if ticket_id:
            selected_data = f"ticket/bilet{ticket_id}.json"
        else:
            ticket_id = random.randint(1, 5)
            selected_data = f"ticket/bilet{ticket_id}.json"
            db.set_selected_ticket(message.from_user.id, ticket_id)
        async with aiofiles.open(selected_data, "r", encoding="utf-8") as file:
            questions = await file.read()
            questions = loads(questions)
        data = loads(callback.data)
        q = data["question"]
        is_correct = questions[q]["correct_answer"] - 1 == data["answer"]
        namedocument = (f"{callback.from_user.id}.docx")
        document.add_paragraph(questions[q]["text"])
        if is_correct==True:
            p = document.add_paragraph()
            p.add_run('–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ').bold=True
            p.add_run((str(data["answer"]++1))).bold=True
            p.add_run(' - –≤–µ—Ä–Ω–æ').bold=True
            document.add_paragraph('\n')
        else: 
            p = document.add_paragraph()
            p.add_run('–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ').bold=True
            p.add_run((str(data["answer"]++1))).bold=True
            p.add_run(' - –Ω–µ –≤–µ—Ä–Ω–æ').bold=True
            document.add_paragraph('\n')
        document.save(namedocument)
        passed = db.get_questions_passed(callback.from_user.id)
        msg = db.get_questions_message(callback.from_user.id)
        if is_correct:
            passed += 1
            db.change_questions_passed(callback.from_user.id, passed)
        if q + 1 > len(questions) - 1:
            if passed <= 7:
                reset(callback.from_user.id)
                await bot.delete_message(callback.from_user.id, msg)
                await bot.send_message(
                    callback.from_user.id,
                    f"üö´ –í—ã –Ω–µ –ø—Ä–æ—à–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç\\!\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\\: *{passed} –∏–∑ {len(questions)}*\\.\n\nüîÑ *–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç —Å–Ω–æ–≤–∞* \\- /play",
                    parse_mode="MarkdownV2"
                )
                doc = docx.Document(namedocument)
                for para in doc.paragraphs:
                    for run in para.runs:
                        run.text = run.text.replace('\\', '').replace('*', '')                  
                doc.save(namedocument)
                await bot.send_document(callback.from_user.id,document=open(namedocument,'rb'))
                os.remove(namedocument)
            if passed >= 8:
                reset(callback.from_user.id)
                await bot.delete_message(callback.from_user.id, msg)
                await bot.send_message(
                    callback.from_user.id,
                    f"üéâ *–£—Ä–∞*, –≤—ã –ø—Ä–æ—à–ª–∏ —ç—Ç–æ —Ç–µ—Å—Ç\\!\n\n‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\\: *{passed} –∏–∑ {len(questions)}*\\.",
                    parse_mode="MarkdownV2"
                )
                doc = docx.Document(namedocument)
                for para in doc.paragraphs:
                    for run in para.runs:
                        run.text = run.text.replace('\\', '').replace('*', '')
                doc.save(namedocument)
                await bot.send_document(callback.from_user.id,document=open(namedocument,'rb'))
                os.remove(namedocument)
            return


        await bot.edit_message_text(
            questions[q + 1]["text"],
            callback.from_user.id,
            msg,
            reply_markup=compose_markup(q + 1),
            parse_mode="MarkdownV2"
        )
    

    db.set_in_process(message.from_user.id, True)
    msg = await bot.send_message(
        message.from_user.id,
        questions[0]["text"],
        reply_markup=compose_markup(0),
        parse_mode="MarkdownV2"
    )

    db.change_questions_message(message.from_user.id, msg.message_id)
    db.change_current_question(message.from_user.id, 0)
    db.change_questions_passed(message.from_user.id, 0)


@dp.message_handler(commands=["finish"])
async def quit_handler(message: Message):
    if not db.is_in_process(message.from_user.id):
        await bot.send_message(message.from_user.id, "‚ùóÔ∏è–í—ã –µ—â—ë *–Ω–µ –Ω–∞—á–∞–ª–∏ —Ç–µ—Å—Ç*\\.", parse_mode="MarkdownV2")
        return
    reset(message.from_user.id)
    await bot.send_message(message.from_user.id, "‚ùóÔ∏è–í—ã *–æ—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Ç–µ—Å—Ç*\\.", parse_mode="MarkdownV2")


@dp.message_handler(commands=["start"])
async def start(message: Message):
    await message.answer("üëã *–ü—Ä–∏–≤–µ—Ç\\!* \nüß† *–≠—Ç–æ –≤–Ω–µ–æ—á–µ—Ä–µ–¥–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞–Ω–∏–π –ø–æ –Ω–æ–≤—ã–º –ø—Ä–∞–≤–∏–ª–∞–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π —ç–∫—Å–ø–ª—É–∞—Ç–∞—Ü–∏–∏ —ç–ª–µ–∫—Ç—Ä–æ—É—Å—Ç–∞–Ω–æ–≤–æ–∫ –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏\\.*\n\nüìù –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ *10 –≤–æ–ø—Ä–æ—Å–æ–≤*\\. \n‚è± –ï—Å–ª–∏ –±—É–¥–µ—Ç–µ –¥—É–º–∞—Ç—å –∫–∞–∫ —Å–ª–µ–¥—É–µ—Ç, —Ç–µ—Å—Ç –∑–∞–π–º–µ—Ç *–æ–∫–æ–ª–æ 10 –º–∏–Ω—É—Ç*\\. \n\n‚ÅâÔ∏è *8* ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π —Å–¥–∞—á–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è\\. \nüìÑ –ö –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É –ø—Ä–µ–¥–ª–∞–≥–∞—é—Ç—Å—è *–Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤*\\. \n\nüîç –í–µ—Ä–Ω—ã–º —è–≤–ª—è–µ—Ç—Å—è * —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω * –≤–∞—Ä–∏–∞–Ω—Ç, –µ–≥–æ –≤–∞–º –∏ –Ω–∞–¥–æ –≤—ã–±—Ä–∞—Ç—å\\.\n\n*–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç* \\- /play\n*–ó–∞–∫–æ–Ω—á–∏—Ç—å —Ç–µ—Å—Ç* \\- /finish\n*–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞* \\- /help", parse_mode="MarkdownV2")


@dp.message_handler(commands=['help'])
async def cmd_answer(message: Message):
    await message.answer("‚ÅâÔ∏è<b> –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã.</b> \n‚úâÔ∏è <b>–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ</b> <a href='https://t.me/mistrcron'>@mistrcron</a><b>.</b>", disable_web_page_preview=True, parse_mode="HTML")


def main() -> None:
    executor.start_polling(dp, skip_updates=True)


if __name__ == "__main__":
    main()